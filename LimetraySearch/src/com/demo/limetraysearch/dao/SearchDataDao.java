package com.demo.limetraysearch.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.demo.limetraysearch.dao.SearchData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SEARCH_DATA.
*/
public class SearchDataDao extends AbstractDao<SearchData, Long> {

    public static final String TABLENAME = "SEARCH_DATA";

    /**
     * Properties of entity SearchData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DateCreated = new Property(0, String.class, "DateCreated", false, "DATE_CREATED");
        public final static Property IdStr = new Property(1, String.class, "IdStr", false, "ID_STR");
        public final static Property Text = new Property(2, String.class, "Text", false, "TEXT");
        public final static Property Source = new Property(3, String.class, "Source", false, "SOURCE");
        public final static Property IsTruncated = new Property(4, Boolean.class, "IsTruncated", false, "IS_TRUNCATED");
        public final static Property InReplyToStatusId = new Property(5, Long.class, "InReplyToStatusId", false, "IN_REPLY_TO_STATUS_ID");
        public final static Property InReplyToStatusIdStr = new Property(6, String.class, "InReplyToStatusIdStr", false, "IN_REPLY_TO_STATUS_ID_STR");
        public final static Property InReplyToUserId = new Property(7, Long.class, "InReplyToUserId", false, "IN_REPLY_TO_USER_ID");
        public final static Property InReplyToUserIdStr = new Property(8, String.class, "InReplyToUserIdStr", false, "IN_REPLY_TO_USER_ID_STR");
        public final static Property InReplyToScreenName = new Property(9, String.class, "InReplyToScreenName", false, "IN_REPLY_TO_SCREEN_NAME");
        public final static Property Id = new Property(10, Long.class, "id", true, "ID");
    };


    public SearchDataDao(DaoConfig config) {
        super(config);
    }
    
    public SearchDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SEARCH_DATA' (" + //
                "'DATE_CREATED' TEXT," + // 0: DateCreated
                "'ID_STR' TEXT," + // 1: IdStr
                "'TEXT' TEXT," + // 2: Text
                "'SOURCE' TEXT," + // 3: Source
                "'IS_TRUNCATED' INTEGER," + // 4: IsTruncated
                "'IN_REPLY_TO_STATUS_ID' INTEGER," + // 5: InReplyToStatusId
                "'IN_REPLY_TO_STATUS_ID_STR' TEXT," + // 6: InReplyToStatusIdStr
                "'IN_REPLY_TO_USER_ID' INTEGER," + // 7: InReplyToUserId
                "'IN_REPLY_TO_USER_ID_STR' TEXT," + // 8: InReplyToUserIdStr
                "'IN_REPLY_TO_SCREEN_NAME' TEXT," + // 9: InReplyToScreenName
                "'ID' INTEGER PRIMARY KEY );"); // 10: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SEARCH_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SearchData entity) {
        stmt.clearBindings();
 
        String DateCreated = entity.getDateCreated();
        if (DateCreated != null) {
            stmt.bindString(1, DateCreated);
        }
 
        String IdStr = entity.getIdStr();
        if (IdStr != null) {
            stmt.bindString(2, IdStr);
        }
 
        String Text = entity.getText();
        if (Text != null) {
            stmt.bindString(3, Text);
        }
 
        String Source = entity.getSource();
        if (Source != null) {
            stmt.bindString(4, Source);
        }
 
        Boolean IsTruncated = entity.getIsTruncated();
        if (IsTruncated != null) {
            stmt.bindLong(5, IsTruncated ? 1l: 0l);
        }
 
        Long InReplyToStatusId = entity.getInReplyToStatusId();
        if (InReplyToStatusId != null) {
            stmt.bindLong(6, InReplyToStatusId);
        }
 
        String InReplyToStatusIdStr = entity.getInReplyToStatusIdStr();
        if (InReplyToStatusIdStr != null) {
            stmt.bindString(7, InReplyToStatusIdStr);
        }
 
        Long InReplyToUserId = entity.getInReplyToUserId();
        if (InReplyToUserId != null) {
            stmt.bindLong(8, InReplyToUserId);
        }
 
        String InReplyToUserIdStr = entity.getInReplyToUserIdStr();
        if (InReplyToUserIdStr != null) {
            stmt.bindString(9, InReplyToUserIdStr);
        }
 
        String InReplyToScreenName = entity.getInReplyToScreenName();
        if (InReplyToScreenName != null) {
            stmt.bindString(10, InReplyToScreenName);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(11, id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10);
    }    

    /** @inheritdoc */
    @Override
    public SearchData readEntity(Cursor cursor, int offset) {
        SearchData entity = new SearchData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // DateCreated
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // IdStr
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Text
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Source
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // IsTruncated
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // InReplyToStatusId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // InReplyToStatusIdStr
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // InReplyToUserId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // InReplyToUserIdStr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // InReplyToScreenName
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SearchData entity, int offset) {
        entity.setDateCreated(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIdStr(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSource(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsTruncated(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setInReplyToStatusId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setInReplyToStatusIdStr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInReplyToUserId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setInReplyToUserIdStr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInReplyToScreenName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SearchData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SearchData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
